CCS PCM C Compiler, Version 5.008, 5967               11-mai-19 11:48

               Filename:   C:\Users\bacem\Desktop\recherche\led\buzzeur.lst

               ROM used:   512 words (6%)
                           Largest free fragment is 2048
               RAM used:   6 (2%) at main() level
                           44 (12%) worst case
               Stack used: 3 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   1D8
0003:  NOP
.................... #include <buzzeur.h> 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
0004:  BTFSC  03.1
0005:  GOTO   009
0006:  MOVLW  43
0007:  MOVWF  04
0008:  BCF    03.7
0009:  CLRF   77
000A:  CLRF   78
000B:  CLRF   79
000C:  CLRF   7A
000D:  CLRF   43
000E:  CLRF   44
000F:  CLRF   45
0010:  CLRF   46
0011:  MOVF   42,W
0012:  IORWF  41,W
0013:  IORWF  40,W
0014:  IORWF  3F,W
0015:  BTFSC  03.2
0016:  GOTO   047
0017:  MOVLW  20
0018:  MOVWF  47
0019:  BCF    03.0
001A:  RLF    3B,F
001B:  RLF    3C,F
001C:  RLF    3D,F
001D:  RLF    3E,F
001E:  RLF    43,F
001F:  RLF    44,F
0020:  RLF    45,F
0021:  RLF    46,F
0022:  MOVF   42,W
0023:  SUBWF  46,W
0024:  BTFSS  03.2
0025:  GOTO   030
0026:  MOVF   41,W
0027:  SUBWF  45,W
0028:  BTFSS  03.2
0029:  GOTO   030
002A:  MOVF   40,W
002B:  SUBWF  44,W
002C:  BTFSS  03.2
002D:  GOTO   030
002E:  MOVF   3F,W
002F:  SUBWF  43,W
0030:  BTFSS  03.0
0031:  GOTO   041
0032:  MOVF   3F,W
0033:  SUBWF  43,F
0034:  MOVF   40,W
0035:  BTFSS  03.0
0036:  INCFSZ 40,W
0037:  SUBWF  44,F
0038:  MOVF   41,W
0039:  BTFSS  03.0
003A:  INCFSZ 41,W
003B:  SUBWF  45,F
003C:  MOVF   42,W
003D:  BTFSS  03.0
003E:  INCFSZ 42,W
003F:  SUBWF  46,F
0040:  BSF    03.0
0041:  RLF    77,F
0042:  RLF    78,F
0043:  RLF    79,F
0044:  RLF    7A,F
0045:  DECFSZ 47,F
0046:  GOTO   019
0047:  MOVF   43,W
0048:  MOVWF  00
0049:  INCF   04,F
004A:  MOVF   44,W
004B:  MOVWF  00
004C:  INCF   04,F
004D:  MOVF   45,W
004E:  MOVWF  00
004F:  INCF   04,F
0050:  MOVF   46,W
0051:  MOVWF  00
0052:  RETURN
0053:  CLRF   78
0054:  CLRF   79
0055:  CLRF   77
0056:  CLRF   7A
0057:  MOVF   36,W
0058:  BTFSS  03.2
0059:  GOTO   05D
005A:  MOVF   35,W
005B:  BTFSC  03.2
005C:  GOTO   077
005D:  MOVLW  10
005E:  MOVWF  37
005F:  BCF    03.0
0060:  RLF    33,F
0061:  RLF    34,F
0062:  RLF    77,F
0063:  RLF    7A,F
0064:  MOVF   36,W
0065:  SUBWF  7A,W
0066:  BTFSS  03.2
0067:  GOTO   06A
0068:  MOVF   35,W
0069:  SUBWF  77,W
006A:  BTFSS  03.0
006B:  GOTO   073
006C:  MOVF   35,W
006D:  SUBWF  77,F
006E:  BTFSS  03.0
006F:  DECF   7A,F
0070:  MOVF   36,W
0071:  SUBWF  7A,F
0072:  BSF    03.0
0073:  RLF    78,F
0074:  RLF    79,F
0075:  DECFSZ 37,F
0076:  GOTO   05F
0077:  RETURN
*
014F:  MOVLW  20
0150:  MOVWF  43
0151:  CLRF   3F
0152:  CLRF   40
0153:  CLRF   41
0154:  CLRF   42
0155:  MOVF   3A,W
0156:  MOVWF  7A
0157:  MOVF   39,W
0158:  MOVWF  79
0159:  MOVF   38,W
015A:  MOVWF  78
015B:  MOVF   37,W
015C:  MOVWF  77
015D:  BCF    03.0
015E:  BTFSS  77.0
015F:  GOTO   16E
0160:  MOVF   3B,W
0161:  ADDWF  3F,F
0162:  MOVF   3C,W
0163:  BTFSC  03.0
0164:  INCFSZ 3C,W
0165:  ADDWF  40,F
0166:  MOVF   3D,W
0167:  BTFSC  03.0
0168:  INCFSZ 3D,W
0169:  ADDWF  41,F
016A:  MOVF   3E,W
016B:  BTFSC  03.0
016C:  INCFSZ 3E,W
016D:  ADDWF  42,F
016E:  RRF    42,F
016F:  RRF    41,F
0170:  RRF    40,F
0171:  RRF    3F,F
0172:  RRF    7A,F
0173:  RRF    79,F
0174:  RRF    78,F
0175:  RRF    77,F
0176:  DECFSZ 43,F
0177:  GOTO   15D
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=16000000) 
*
0078:  MOVLW  38
0079:  MOVWF  04
007A:  BCF    03.7
007B:  MOVF   00,W
007C:  BTFSC  03.2
007D:  GOTO   08C
007E:  MOVLW  05
007F:  MOVWF  78
0080:  CLRF   77
0081:  DECFSZ 77,F
0082:  GOTO   081
0083:  DECFSZ 78,F
0084:  GOTO   080
0085:  MOVLW  2E
0086:  MOVWF  77
0087:  DECFSZ 77,F
0088:  GOTO   087
0089:  GOTO   08A
008A:  DECFSZ 00,F
008B:  GOTO   07E
008C:  RETURN
008D:  MOVLW  03
008E:  SUBWF  38,F
008F:  BTFSS  03.0
0090:  GOTO   09B
0091:  MOVLW  38
0092:  MOVWF  04
0093:  BCF    03.7
0094:  MOVF   00,W
0095:  BTFSC  03.2
0096:  GOTO   09B
0097:  GOTO   099
0098:  NOP
0099:  DECFSZ 00,F
009A:  GOTO   098
009B:  RETURN
....................  
....................  
.................... #include <C:\Users\bacem\Desktop\recherche\rtc16Mhz\sound.c> 
....................  
.................... ////////////////// Driver to generate musical tones /////////////////////  
.................... ////                                                                 ////  
.................... ////  generate_tone(frequency, duration)     Generates wave at set   ////  
.................... ////                                         frequency (Hz) for set  ////  
.................... ////                                         duration (ms)           ////  
.................... ////                                                                 ////  
.................... /////////////////////////////////////////////////////////////////////////  
.................... ////        (C) Copyright 1996,2003 Custom Computer Services         ////  
.................... //// This source code may only be used by licensed users of the CCS  ////  
.................... //// C compiler.  This source code may only be distributed to other  ////  
.................... //// licensed users of the CCS C compiler.  No other use,            ////  
.................... //// reproduction or distribution is permitted without written       ////  
.................... //// permission.  Derivative programs created using this software    ////  
.................... //// in object code form are not restricted in any way.              ////  
.................... /////////////////////////////////////////////////////////////////////////  
....................  
....................  
.................... #ifndef  MUSIC_NOTES  
.................... #define  MUSIC_NOTES  
....................                        
.................... #define TONE_PIN  PIN_B4  
....................  
....................  
.................... void do_delay(int ms_delay, int num_ms, int us_delay, int num_us)   
.................... {                                                                       
....................  int i;            
....................             
....................  for(i=0;i<num_ms;i++)  
009C:  CLRF   37
009D:  MOVF   34,W
009E:  SUBWF  37,W
009F:  BTFSC  03.0
00A0:  GOTO   0A6
....................   delay_ms(250);  
00A1:  MOVLW  FA
00A2:  MOVWF  38
00A3:  CALL   078
00A4:  INCF   37,F
00A5:  GOTO   09D
....................  delay_ms(ms_delay);  
00A6:  MOVF   33,W
00A7:  MOVWF  38
00A8:  CALL   078
....................  for(i=0;i<num_us;i++)  
00A9:  CLRF   37
00AA:  MOVF   36,W
00AB:  SUBWF  37,W
00AC:  BTFSC  03.0
00AD:  GOTO   0B3
....................   delay_us(250);  
00AE:  MOVLW  FA
00AF:  MOVWF  38
00B0:  CALL   08D
00B1:  INCF   37,F
00B2:  GOTO   0AA
....................  delay_us(us_delay);  
00B3:  MOVF   35,W
00B4:  MOVWF  38
00B5:  CALL   08D
00B6:  RETURN
.................... }  
....................  
....................  
.................... void generate_tone(long frequency, long duration)  
.................... {  
....................    int32 total_delay_time;                      // in microseconds  
....................    long total_ms_delay_time, total_us_delay_time;  
....................    int num_us_delays, num_ms_delays, ms_delay_time, us_delay_time;  
....................    long num_periods;  
....................  
....................    total_delay_time = (1000000/frequency)/2-10; // calculate total delay time (10 for error)  
00B7:  BCF    03.1
00B8:  CLRF   3E
00B9:  MOVLW  0F
00BA:  MOVWF  3D
00BB:  MOVLW  42
00BC:  MOVWF  3C
00BD:  MOVLW  40
00BE:  MOVWF  3B
00BF:  CLRF   42
00C0:  CLRF   41
00C1:  MOVF   22,W
00C2:  MOVWF  40
00C3:  MOVF   21,W
00C4:  MOVWF  3F
00C5:  CALL   004
00C6:  MOVF   7A,W
00C7:  MOVWF  36
00C8:  MOVF   79,W
00C9:  MOVWF  35
00CA:  MOVF   78,W
00CB:  MOVWF  34
00CC:  MOVF   77,W
00CD:  MOVWF  33
00CE:  BCF    03.0
00CF:  RRF    36,F
00D0:  RRF    35,F
00D1:  RRF    34,F
00D2:  RRF    33,F
00D3:  MOVLW  0A
00D4:  SUBWF  33,W
00D5:  MOVWF  25
00D6:  MOVF   34,W
00D7:  MOVWF  26
00D8:  MOVLW  00
00D9:  BTFSS  03.0
00DA:  MOVLW  01
00DB:  SUBWF  26,F
00DC:  MOVF   35,W
00DD:  MOVWF  27
00DE:  MOVLW  00
00DF:  BTFSS  03.0
00E0:  MOVLW  01
00E1:  SUBWF  27,F
00E2:  MOVF   36,W
00E3:  MOVWF  28
00E4:  MOVLW  00
00E5:  BTFSS  03.0
00E6:  MOVLW  01
00E7:  SUBWF  28,F
....................  
....................    total_ms_delay_time = total_delay_time/1000; // total delay time of ms  
00E8:  BCF    03.1
00E9:  MOVF   28,W
00EA:  MOVWF  3E
00EB:  MOVF   27,W
00EC:  MOVWF  3D
00ED:  MOVF   26,W
00EE:  MOVWF  3C
00EF:  MOVF   25,W
00F0:  MOVWF  3B
00F1:  CLRF   42
00F2:  CLRF   41
00F3:  MOVLW  03
00F4:  MOVWF  40
00F5:  MOVLW  E8
00F6:  MOVWF  3F
00F7:  CALL   004
00F8:  MOVF   78,W
00F9:  MOVWF  2A
00FA:  MOVF   77,W
00FB:  MOVWF  29
....................    num_ms_delays = total_ms_delay_time/250;     // number of 250ms delays needed  
00FC:  MOVF   2A,W
00FD:  MOVWF  34
00FE:  MOVF   29,W
00FF:  MOVWF  33
0100:  CLRF   36
0101:  MOVLW  FA
0102:  MOVWF  35
0103:  CALL   053
0104:  MOVF   78,W
0105:  MOVWF  2E
....................    ms_delay_time = total_ms_delay_time%250;     // left over ms delay time needed  
0106:  MOVF   2A,W
0107:  MOVWF  34
0108:  MOVF   29,W
0109:  MOVWF  33
010A:  CLRF   36
010B:  MOVLW  FA
010C:  MOVWF  35
010D:  CALL   053
010E:  MOVF   77,W
010F:  MOVWF  2F
....................  
....................    total_us_delay_time = total_delay_time%1000; // total delay time of us (ms already acounted for)  
0110:  BSF    03.1
0111:  MOVLW  33
0112:  MOVWF  04
0113:  BCF    03.7
0114:  MOVF   28,W
0115:  MOVWF  3E
0116:  MOVF   27,W
0117:  MOVWF  3D
0118:  MOVF   26,W
0119:  MOVWF  3C
011A:  MOVF   25,W
011B:  MOVWF  3B
011C:  CLRF   42
011D:  CLRF   41
011E:  MOVLW  03
011F:  MOVWF  40
0120:  MOVLW  E8
0121:  MOVWF  3F
0122:  CALL   004
0123:  MOVF   34,W
0124:  MOVWF  2C
0125:  MOVF   33,W
0126:  MOVWF  2B
....................    num_us_delays = total_us_delay_time/250;     // number of 250us delays needed  
0127:  MOVF   2C,W
0128:  MOVWF  34
0129:  MOVF   2B,W
012A:  MOVWF  33
012B:  CLRF   36
012C:  MOVLW  FA
012D:  MOVWF  35
012E:  CALL   053
012F:  MOVF   78,W
0130:  MOVWF  2D
....................    us_delay_time = total_us_delay_time%250;     // left over us delay time needed  
0131:  MOVF   2C,W
0132:  MOVWF  34
0133:  MOVF   2B,W
0134:  MOVWF  33
0135:  CLRF   36
0136:  MOVLW  FA
0137:  MOVWF  35
0138:  CALL   053
0139:  MOVF   77,W
013A:  MOVWF  30
....................  
....................    num_periods = ((int32)duration*1000)/(1000000/frequency);  
013B:  CLRF   36
013C:  CLRF   35
013D:  MOVF   24,W
013E:  MOVWF  34
013F:  MOVF   23,W
0140:  MOVWF  33
0141:  MOVF   36,W
0142:  MOVWF  3A
0143:  MOVF   35,W
0144:  MOVWF  39
0145:  MOVF   34,W
0146:  MOVWF  38
0147:  MOVF   33,W
0148:  MOVWF  37
0149:  CLRF   3E
014A:  CLRF   3D
014B:  MOVLW  03
014C:  MOVWF  3C
014D:  MOVLW  E8
014E:  MOVWF  3B
*
0178:  MOVF   7A,W
0179:  MOVWF  36
017A:  MOVF   79,W
017B:  MOVWF  35
017C:  MOVF   78,W
017D:  MOVWF  34
017E:  MOVF   77,W
017F:  MOVWF  33
0180:  BCF    03.1
0181:  CLRF   3E
0182:  MOVLW  0F
0183:  MOVWF  3D
0184:  MOVLW  42
0185:  MOVWF  3C
0186:  MOVLW  40
0187:  MOVWF  3B
0188:  CLRF   42
0189:  CLRF   41
018A:  MOVF   22,W
018B:  MOVWF  40
018C:  MOVF   21,W
018D:  MOVWF  3F
018E:  CALL   004
018F:  MOVF   7A,W
0190:  MOVWF  3A
0191:  MOVF   79,W
0192:  MOVWF  39
0193:  MOVF   78,W
0194:  MOVWF  38
0195:  MOVF   77,W
0196:  MOVWF  37
0197:  BCF    03.1
0198:  MOVF   36,W
0199:  MOVWF  3E
019A:  MOVF   35,W
019B:  MOVWF  3D
019C:  MOVF   34,W
019D:  MOVWF  3C
019E:  MOVF   33,W
019F:  MOVWF  3B
01A0:  MOVF   7A,W
01A1:  MOVWF  42
01A2:  MOVF   79,W
01A3:  MOVWF  41
01A4:  MOVF   78,W
01A5:  MOVWF  40
01A6:  MOVF   77,W
01A7:  MOVWF  3F
01A8:  CALL   004
01A9:  MOVF   78,W
01AA:  MOVWF  32
01AB:  MOVF   77,W
01AC:  MOVWF  31
....................  
....................    while((num_periods--) != 0)  
01AD:  MOVF   32,W
01AE:  MOVWF  7A
01AF:  MOVF   31,W
01B0:  BTFSC  03.2
01B1:  DECF   32,F
01B2:  DECF   31,F
01B3:  MOVWF  33
01B4:  MOVF   7A,W
01B5:  MOVWF  34
01B6:  MOVF   33,F
01B7:  BTFSS  03.2
01B8:  GOTO   1BC
01B9:  MOVF   34,F
01BA:  BTFSC  03.2
01BB:  GOTO   1D7
....................    {  
....................       do_delay(ms_delay_time, num_ms_delays, us_delay_time, num_us_delays);  
01BC:  MOVF   2F,W
01BD:  MOVWF  33
01BE:  MOVF   2E,W
01BF:  MOVWF  34
01C0:  MOVF   30,W
01C1:  MOVWF  35
01C2:  MOVF   2D,W
01C3:  MOVWF  36
01C4:  CALL   09C
....................       output_high(TONE_PIN);  
01C5:  BSF    03.5
01C6:  BCF    06.4
01C7:  BCF    03.5
01C8:  BSF    06.4
....................       do_delay(ms_delay_time, num_ms_delays, us_delay_time, num_us_delays);  
01C9:  MOVF   2F,W
01CA:  MOVWF  33
01CB:  MOVF   2E,W
01CC:  MOVWF  34
01CD:  MOVF   30,W
01CE:  MOVWF  35
01CF:  MOVF   2D,W
01D0:  MOVWF  36
01D1:  CALL   09C
....................       output_low(TONE_PIN);  
01D2:  BSF    03.5
01D3:  BCF    06.4
01D4:  BCF    03.5
01D5:  BCF    06.4
01D6:  GOTO   1AD
....................    }  
....................  
....................    return;  
01D7:  RETURN
.................... }  
....................  
....................  
.................... void main() 
01D8:  MOVF   03,W
01D9:  ANDLW  1F
01DA:  MOVWF  03
01DB:  BSF    03.5
01DC:  BSF    1F.0
01DD:  BSF    1F.1
01DE:  BSF    1F.2
01DF:  BCF    1F.3
01E0:  MOVLW  07
01E1:  MOVWF  1C
01E2:  BCF    03.7
.................... { 
....................  
....................    while(TRUE) 
....................    { 
....................          if(input(PIN_A0)==1) 
01E3:  BSF    05.0
01E4:  BCF    03.5
01E5:  BTFSS  05.0
01E6:  GOTO   1F0
....................    { 
....................       generate_tone(1900, 200);   
01E7:  MOVLW  07
01E8:  MOVWF  22
01E9:  MOVLW  6C
01EA:  MOVWF  21
01EB:  CLRF   24
01EC:  MOVLW  C8
01ED:  MOVWF  23
01EE:  CALL   0B7
....................      // return 1; 
....................    }   
01EF:  GOTO   1FD
....................    else if(input(PIN_A1)==1) 
01F0:  BSF    03.5
01F1:  BSF    05.1
01F2:  BCF    03.5
01F3:  BTFSS  05.1
01F4:  GOTO   1FD
....................    { 
....................       generate_tone(2900, 150);   
01F5:  MOVLW  0B
01F6:  MOVWF  22
01F7:  MOVLW  54
01F8:  MOVWF  21
01F9:  CLRF   24
01FA:  MOVLW  96
01FB:  MOVWF  23
01FC:  CALL   0B7
....................      // return 2;                   
....................    }  
....................    else 
....................    { 
....................      // return 0; 
....................    } 
01FD:  BSF    03.5
01FE:  GOTO   1E3
....................    } 
....................  
.................... } 
01FF:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
